Index: lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
===================================================================
--- lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp	(revision 240022)
+++ lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp	(working copy)
@@ -6591,7 +6591,7 @@
                       LandingPad, true);
 
   SDNode *CallEnd = Result.second.getNode();
-  if (HasDef && (CallEnd->getOpcode() == ISD::CopyFromReg))
+  while (HasDef && (CallEnd->getOpcode() == ISD::CopyFromReg))
     CallEnd = CallEnd->getOperand(0).getNode();
 
   /// Get a call instruction from the call sequence chain.
Index: lib/ExecutionEngine/ExecutionEngineBindings.cpp
===================================================================
--- lib/ExecutionEngine/ExecutionEngineBindings.cpp	(revision 240022)
+++ lib/ExecutionEngine/ExecutionEngineBindings.cpp	(working copy)
@@ -18,6 +18,7 @@
 #include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/Module.h"
 #include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/Mutex.h"
 #include "llvm/Target/TargetOptions.h"
 #include <cstring>
 
@@ -25,6 +26,10 @@
 
 #define DEBUG_TYPE "jit"
 
+static llvm::sys::Mutex InitCPUMutex;
+static bool CPUInit = false;
+static std::string CPUName;
+static std::vector<std::string> CPUAttr;
 // Wrapping the C bindings types.
 DEFINE_SIMPLE_CONVERSION_FUNCTIONS(GenericValue, LLVMGenericValueRef)
 
@@ -194,11 +199,28 @@
 
   std::string Error;
   EngineBuilder builder(std::move(Mod));
+  {
+    llvm::sys::ScopedLock lock(InitCPUMutex);
+    if (!CPUInit) {
+      CPUInit = true;
+      CPUName = sys::getHostCPUName();
+      StringMap<bool> HostFeatures;
+      if (sys::getHostCPUFeatures(HostFeatures)) {
+        for (auto& p : HostFeatures) {
+          if (p.second) {
+            CPUAttr.push_back(p.first());
+          }
+        }
+      }
+    }
+  }
   builder.setEngineKind(EngineKind::JIT)
          .setErrorStr(&Error)
          .setOptLevel((CodeGenOpt::Level)options.OptLevel)
          .setCodeModel(unwrap(options.CodeModel))
-         .setTargetOptions(targetOptions);
+         .setTargetOptions(targetOptions)
+         .setMCPU(CPUName)
+         .setMAttrs(CPUAttr);
   if (options.MCJMM)
     builder.setMCJITMemoryManager(
       std::unique_ptr<RTDyldMemoryManager>(unwrap(options.MCJMM)));
Index: lib/Target/X86/MCTargetDesc/X86ELFObjectWriter.cpp
===================================================================
--- lib/Target/X86/MCTargetDesc/X86ELFObjectWriter.cpp	(revision 240022)
+++ lib/Target/X86/MCTargetDesc/X86ELFObjectWriter.cpp	(working copy)
@@ -167,7 +167,6 @@
 static X86_32RelType getType32(X86_64RelType T) {
   switch (T) {
   case RT64_64:
-    llvm_unreachable("Unimplemented");
   case RT64_32:
   case RT64_32S:
     return RT32_32;
Index: lib/Target/X86/X86MCInstLower.cpp
===================================================================
--- lib/Target/X86/X86MCInstLower.cpp	(revision 240022)
+++ lib/Target/X86/X86MCInstLower.cpp	(working copy)
@@ -760,11 +760,8 @@
                             .addExpr(tlsRef));
 }
 
-/// \brief Emit the optimal amount of multi-byte nops on X86.
-static void EmitNops(MCStreamer &OS, unsigned NumBytes, bool Is64Bit, const MCSubtargetInfo &STI) {
-  // This works only for 64bit. For 32bit we have to do additional checking if
-  // the CPU supports multi-byte nops.
-  assert(Is64Bit && "EmitNops only supports X86-64");
+static void EmitNops64(MCStreamer &OS, unsigned NumBytes, const MCSubtargetInfo &STI)
+{
   while (NumBytes) {
     unsigned Opc, BaseReg, ScaleVal, IndexReg, Displacement, SegmentReg;
     Opc = IndexReg = Displacement = SegmentReg = 0;
@@ -811,6 +808,22 @@
   } // while (NumBytes)
 }
 
+static void EmitNops32(MCStreamer &OS, unsigned NumBytes, const MCSubtargetInfo &STI)
+{
+    for (; NumBytes; --NumBytes) {
+        OS.EmitBytes("\x90");
+    }
+}
+
+/// \brief Emit the optimal amount of multi-byte nops on X86.
+static void EmitNops(MCStreamer &OS, unsigned NumBytes, bool Is64Bit, const MCSubtargetInfo &STI) {
+  if (Is64Bit) {
+      EmitNops64(OS, NumBytes, STI);
+  } else {
+      EmitNops32(OS, NumBytes, STI);
+  }
+}
+
 void X86AsmPrinter::LowerSTATEPOINT(const MachineInstr &MI,
                                     X86MCInstLower &MCIL) {
   assert(Subtarget->is64Bit() && "Statepoint currently only supports X86-64");
@@ -900,7 +913,6 @@
 // [<def>], <id>, <numBytes>, <target>, <numArgs>, <cc>, ...
 void X86AsmPrinter::LowerPATCHPOINT(const MachineInstr &MI,
                                     X86MCInstLower &MCIL) {
-  assert(Subtarget->is64Bit() && "Patchpoint currently only supports X86-64");
 
   SMShadowTracker.emitShadowPadding(*OutStreamer, getSubtargetInfo());
 
@@ -935,14 +947,21 @@
     // Emit MOV to materialize the target address and the CALL to target.
     // This is encoded with 12-13 bytes, depending on which register is used.
     unsigned ScratchReg = MI.getOperand(ScratchIdx).getReg();
-    if (X86II::isX86_64ExtendedReg(ScratchReg))
-      EncodedBytes = 13;
-    else
-      EncodedBytes = 12;
+    if (Subtarget->is64Bit()) {
+        if (X86II::isX86_64ExtendedReg(ScratchReg))
+            EncodedBytes = 13;
+        else
+            EncodedBytes = 12;
+        EmitAndCountInstruction(
+            MCInstBuilder(X86::MOV64ri).addReg(ScratchReg).addOperand(CalleeMCOp));
+        EmitAndCountInstruction(MCInstBuilder(X86::CALL64r).addReg(ScratchReg));
+    } else {
+        EncodedBytes = 7;
+        EmitAndCountInstruction(
+            MCInstBuilder(X86::MOV32ri).addReg(ScratchReg).addOperand(CalleeMCOp));
+        EmitAndCountInstruction(MCInstBuilder(X86::CALL32r).addReg(ScratchReg));
+    }
 
-    EmitAndCountInstruction(
-        MCInstBuilder(X86::MOV64ri).addReg(ScratchReg).addOperand(CalleeMCOp));
-    EmitAndCountInstruction(MCInstBuilder(X86::CALL64r).addReg(ScratchReg));
   }
 
   // Emit padding.
